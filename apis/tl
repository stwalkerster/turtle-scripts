function version()
	return 2
end

local sOpenedSide = nil
function open()
	local bOpen, sFreeSide = false, nil
	for n,sSide in pairs(rs.getSides()) do	
		if peripheral.getType( sSide ) == "modem" then
			sFreeSide = sSide
			if rednet.isOpen( sSide ) then
				bOpen = true
				break
			end
		end
	end
	
	if not bOpen then
		if sFreeSide then
			rednet.open( sFreeSide )
			sOpenedSide = sFreeSide
			return true
		else
			print( "No modem attached" )
			return false
		end
	end
	return true
end

function updateLocation(stage)
	open()
	x, y, z = gps.locate(2,false)
	f = turtle.getFuelLevel()
	
	task = "-"
	if fs.exists("task") then
		h = fs.open("task","r")
		task = h.readLine()
		h.close()
	end
	
	if x ~= nil then
		rednet.send(getControlServer(), textutils.serialize({x,y,z,f,stage,task}));
	end
end

function getControlServer()
	idList = {}
	idList["turtle01"] = 8
	idList["turtle02"] = 11
	return idList[os.getComputerLabel()]
end


function Dig()	
	while turtle.detect() do
		turtle.dig();
	end
end

function ReallyDigDown()	
	while turtle.detectDown() do
		turtle.digDown();
	end
end

function DigForward()
	moved = turtle.forward();
	

	while not moved do
		if turtle.detect() then
			-- block in my way
			Dig();
			moved = turtle.forward()
		elseif turtle.getFuelLevel() == 0 then
			-- out of fuel
			turtle.select(1);
			turtle.refuel();
			if turtle.getFuelLevel() == 0 then
				writeline("Please refuel me!");
				while turtle.getFuelLevel() == 0 do
					turtle.refuel();
				end
			end
			
			moved = turtle.forward();
		else
			-- player / npc?
			moved = turtle.forward();
		end
	end
end

function DigDown()
	while not turtle.down() do
		ReallyDigDown();
	end
end

function getOrientation()
	p1x, p1y, p1z = gps.locate(2, false)
	
	if p1x == nil then
		return nil
	end
	
	reverse = false;
	orientation = nil;
	
	if not turtle.forward() then
--		turtle.back()
--		reverse = true
		return nil
	end
	
	p2x, p2y, p2z = gps.locate(2,false)
	
	if p2x == nil then
		return nil
	end
	
	if p1x==p2x then
		if p1z > p2z then
			orientation = 2;
		elseif p1z < p2z then
			orientation = 0;
		end
	elseif p1x > p2x then
		orientation = 1;
	elseif p1x < p2x then
		orientation = 3;
	end

	return orientation
end


function goToLocation(targetx,targety,targetz)
	if not tl.open() then return false end
	local myx, myy, myz = gps.locate(2, false)

	local dy = targety - myy

	-- sort out y
	if dy > 0 then
		-- go up
		dy = dy
		for y = 1 , dy do turtle.up() tl.updateLocation(stage) end
	elseif dy < 0 then
		-- go down
		dy = math.abs(dy)
		for y = 1 , dy do turtle.down() tl.updateLocation(stage) end
	end

	local orientation = tl.getOrientation()
	myx, myy, myz = gps.locate(2, false)
	dx = targetx - myx
	dz = targetz - myz

	-- standardise our orientation
	if orientation == 1 then
		-- we moved -x
		-- turn to face +x
		turtle.turnRight()
		turtle.turnRight()
	elseif orientation == 2 then
		-- we moved -z
		-- turn to face +x
		turtle.turnRight()
	elseif orientation == 3 then
		-- we moved +x
	elseif orientation == 0 then
		-- we moved +z
		-- turn to face +x
		turtle.turnLeft()
	end

	-- moving forward will now inc x.

	-- sort out x
	if dx > 0 then
		-- go forward
		dx = dx
		for x = 1 , dx do turtle.forward() tl.updateLocation(stage) end
	elseif dx < 0 then
		-- go back
		dx = math.abs(dx)
		for x = 1 , dx do turtle.back() tl.updateLocation(stage) end
	end

	-- turning right will inc z
	turtle.turnRight()

	-- sort out z
	if dz > 0 then
		-- go forward
		dz = dz
		for z = 1 , dz do turtle.forward() tl.updateLocation(stage) end
	elseif dz < 0 then
		-- go back
		dz = math.abs(dz)
		for z = 1 , dz do turtle.back() tl.updateLocation(stage) end
	end


	mynx, myny, mynz = gps.locate(2, false)
	ndx = targetx - mynx
	ndz = targetz - mynz
	ndy = targety - myny

	if ndx ~= 0 or ndy ~= 0 or ndz ~= 0 then

		print( "Could not move to location")
		tl.updateLocation("Ready.")
		return false
	else
		return true
	end
end